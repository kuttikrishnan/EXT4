@using SampleBlazor.Data
@using BlazorMAUI.Model
@using BlazorMAUI.Helper

@inject FileDataService fileDataService
<div class="row">

    <div class="column">

        <ul>
            @if(kktest != null && kktest.Length >0)
            {
                @foreach (var item in kktest)
                {
                 <li>@item</li>   
                }
            }
        </ul>

    </div>
</div>

@code {

    [Parameter]
    public string FolderPath { get; set; }

    [Parameter]
    public EventCallback<string> onCheckboxValueChanged { get; set; }

    public List<string> SelectedFiles ;

    public FolderHierarchy folderHierarchy = new FolderHierarchy();

    public string[] kktest;

    protected Task buttonClicked()
    {
        SelectedFiles = new List<string>();
        var parentFileDataList = folderHierarchy.subFolders.SelectMany(x => x.Files).Where(x=>x.IsSelected == true).ToList();
        var childFileDataList = folderHierarchy.subFolders.SelectMany(x => x.subFolders).SelectMany(x => x.Files).Where(x => x.IsSelected == true).ToList();
        parentFileDataList.AddRange(childFileDataList);
        var subFolders = folderHierarchy.subFolders.Postorder(x => x.subFolders).Select(x=> x.Files);
        foreach (var Files in subFolders)
        {
            foreach (var file in Files)
            {
                if(file.IsSelected){
                    SelectedFiles.Add(file.FileName);
                }   
            }
        }

        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        folderHierarchy = GetFolderHierarchy(FolderPath);
    }


    private FolderHierarchy GetFolderHierarchy(string dirName)
    {
        //var disk = ExtDisk.Open(1);
        //var fs = ExtFileSystem.Open(disk, disk.Partitions[1]);
        //var directories = fs.GetDirectories("/home/", "*", SearchOption.AllDirectories);
        //var files = fs.GetFiles(dirName,"*",SearchOption.TopDirectoryOnly);
        var directories = Directory.GetDirectories(dirName);
        var files = Directory.GetFiles(dirName, "*", SearchOption.TopDirectoryOnly);

        List<FolderHierarchy> listOfFolders = new List<FolderHierarchy>();
        List<FileData> fileData = new List<FileData>();
        foreach (var file in files)
        {
            fileData.Add(new FileData() { FileName = file, IsSelected = false });
        }
        foreach (var dir in directories)
        {
            listOfFolders.Add(GetFolderHierarchy(dir));
        }

        FolderHierarchy folderHierarchy = new FolderHierarchy() { Name = dirName, Files = fileData, subFolders = listOfFolders, IsSelected = false };

        return folderHierarchy;
    }



    

   
}
